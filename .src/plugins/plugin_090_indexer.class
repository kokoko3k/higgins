' Gambas class file

Create Static
Static Public Description As String = ("Index filenames from user-defined folders.")
Static Public Friendly_name As String = ("Indexer")
Static Public configurable As Boolean = True
Static Public Default_enabled As Boolean = True
Static Public default_blocking As Boolean = False                 'Should the subsequent plugins be blocked when
                                                          'this plugin finds some results?
                                                          
Public id As Float

Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates an action
  Action_p As Variant          'the parameter for Action
End Struct

Private plugin As String
Private iconsize As Integer
Private minchar As Integer = 4   'exit if the search term is lower than that

Public index_db As New String[]
Private index_file As String

Private caller As Object

Private wait_time As Float = 0.0005
Private ratio_wait_time As Integer = 10000

Public Sub _new(p_plugin As String, p_iconsize As Integer)
  id = Rnd(0, 1)
  caller = Last
  index_file = fmain.Confpath & "/indexer.txt"
  
  plugin = p_plugin
  iconsize = p_iconsize
  Try index_db = Split(File.Load(index_file), "\n")
  plugin_indexer_gui.init(Me)
  plugin_indexer_gui.LoadSettings()
  restart_timer()  
End


Public Sub Stop()
  
  'not sure if this is the right way, but this should be called when the plugin has to be unloaded
  reindex_timer.stop
  
End

Public Sub _free()

End

Private Sub trigged(query As String) As Boolean
  If Len(query) < minchar Then Return False
  If Left(query) = "=" Then Return
  If Right(query) = "=" Then Return
  'some more controls here (?)
  Return True
End



Public Sub find(textcontrol As Object) As RItemT[]
  'search for filedialogs bookmarks
  Dim rResults As New RItemT[]
  Dim rResult As RItemT
  Dim current_search As String = Lower(textcontrol.text)
  Dim aline As String
  Dim i As Integer
  Dim results_pushed As Integer
  Dim got_items As New String[]
  Dim fd, fn As String
  Dim matched As Boolean = False
  Dim file_name As String
  Dim match_fullpath As Boolean = (plugin_indexer_gui.CheckboxMatchFullPath.value = CheckBox.true)
  Dim match_hidden As Boolean = (plugin_indexer_gui.CheckBoxMatchHidden.value = CheckBox.true)
  If Not trigged(textcontrol.text) Then Return

  'directories whose name = query
  For i = 0 To index_db.Max
    aline = Lower(index_db[i])
    If aline Ends "/" Then 'isdir
      fd = File.Name(File.Dir(aline))
      If fd = current_search Then
        rResult = create_item(index_db[i])
        If rResult <> Null Then
          got_items.Add(i)
          rResults.Add(rResult)
          Raise new_results(rResults)
          rResults.clear
        Endif
      Endif     
    Endif
    If (i Mod ratio_wait_time) = 0 Then 
      Wait wait_time 'take a breath
      If current_search <> Lower(textcontrol.text) Then
        Debug "Cancelled previous search " & current_search
        Return
      Endif 
    Endif
  Next


  'files whose name = query
  For i = 0 To index_db.Max
    If got_items.Find(i) < 0 'this avoids searching for already displayed items
      aline = Lower(index_db[i])
      If Not (aline Ends "/") Then 'is not dir
        fn = File.Name(aline)
        If fn = current_search Then
          rResult = create_item(index_db[i])
          If rResult <> Null Then
            got_items.Add(i)
            rResults.Add(rResult)
            Raise new_results(rResults)
            rResults.clear
          Endif
        Endif     
      Endif
    Endif
    If (i Mod ratio_wait_time) = 0 Then 
      Wait wait_time 'take a breath
      If current_search <> Lower(textcontrol.text) Then
        Debug "Cancelled previous search " & current_search
        Return
      Endif 
    Endif
  Next


  'directories whose name begins with query
  For i = 0 To index_db.Max
    If got_items.Find(i) < 0 'this avoids searching for already displayed items
      aline = Lower(index_db[i])
      If aline Ends "/" Then 'isdir
        fd = File.Name(File.Dir(aline))
        If fd Begins current_search Then
          rResult = create_item(index_db[i])
          If rResult <> Null Then
            got_items.Add(i)
            rResults.Add(rResult)
            Raise new_results(rResults)
            rResults.clear
          Endif
        Endif     
      Endif
    Endif
    If (i Mod ratio_wait_time) = 0 Then 
      Wait wait_time 'take a breath
        If current_search <> Lower(textcontrol.text) Then
        Debug "Cancelled previous search " & current_search
        Return
      Endif 
    Endif
  Next


  'files whose name begins with query
  For i = 0 To index_db.Max
    If got_items.Find(i) < 0 'this avoids searching for already displayed items
      aline = Lower(index_db[i])
      If Not (aline Ends "/") Then 'is not dir
        fn = File.Name(aline)
        If fn Begins current_search Then
          rResult = create_item(index_db[i])
          If rResult <> Null Then
            got_items.Add(i)
            rResults.Add(rResult)
            Raise new_results(rResults)
            rResults.clear
          Endif
        Endif     
      Endif
    Endif
    If (i Mod ratio_wait_time) = 0 Then 
      Wait wait_time 'take a breath
        If current_search <> Lower(textcontrol.text) Then
        Debug "Cancelled previous search " & current_search
        Return
      Endif 
    Endif
  Next

  'all of the others
  For i = 0 To index_db.max
    matched = False
    If got_items.Find(i) < 0 'this avoids searching for already displayed items
      If match_fullpath Then
        file_name = index_db[i]
          Else
        file_name = File.name(index_db[i])
      Endif
      If file_name Begins "." Then
        If Not match_hidden Then Continue
      Endif
      If InStr(Lower(file_name), Lower(current_search)) Then matched = True
      If (Not matched) Then Try matched = (file_name Like "*" & current_search & "*") 
      If matched Then
        rResult = create_item(index_db[i])
        If rResult <> Null Then 
          rResults.Add(rResult)
          If rResults.count >= 5 Then 
            Raise new_results(rResults)
            results_pushed += rResults.Count
            If results_pushed >= plugin_indexer_gui.SpinMaxResults.value Then Return
            rResults.clear
          Endif
        Endif
          If current_search <> Lower(textcontrol.text) Then
          Debug "Cancelled previous search " & current_search
          Return
        Endif 
      Endif
    Endif
    If (i Mod (ratio_wait_time Div 100)) = 0 Then 
      'Debug "take a break" & Timer()
      Wait wait_time 'take a breath
        If current_search <> Lower(textcontrol.text) Then
        Debug "Cancelled previous search " & current_search
        Return
      Endif 
    Endif
  Next
  
   If current_search <> Lower(textcontrol.text) Then Return
  
  Raise new_results(rResults)
End

Event new_results(rResults As RItemT[])


Private Function create_item(path As String) As RItemT
  Dim return_item As RItemT

  If Not (Exist(path, True)) Then Return Null
  return_item = New RItemT  

  If path Ends ".desktop" Then 
    MyDesktop.init()
    MyDesktop.parse(path)
    return_item.image_file = "resize://" & MyDesktop.Get_file_Icon(MyDesktop.dIconName, iconsize)
      Else
    If Stat(path, True).type = gb.Directory Then
      return_item.image_file = "icon:/" & iconsize & "/directory"
        Else
      return_item.image_file = "mimetype://" & path
    Endif
  Endif
  
  return_item.plugin = plugin
  return_item.Action = "GUESS"
  return_item.Action_p = path
  return_item.Clipboard_data = path

  If path Ends "/" Then path = Left(path, -1)  
  return_item.Text = File.Name(path)
  return_item.SubText = "In: " & File.Dir(path)

  Return return_item

End




Public reindex_timer As Timer
Private reindex_minutes_timeout As Integer 

Public Sub restart_timer()
  Dim minutes_integer As Integer
  Dim minutes_timeout As Date = plugin_indexer_gui.ValueBoxReindex.value
  Dim gui As Object = plugin_indexer_gui

  minutes_integer = (Hour(minutes_timeout) * 60) + Minute(minutes_timeout)
  If gui.last_index_time = Null Then 
    gui.last_index_time = Date(1900, 1, 1)
  Endif

  reindex_timer = New Timer As "reindex_timer"
  reindex_timer.delay = 60000
  reindex_minutes_timeout = minutes_integer
  reindex_timer.start
  reindex_timer.Trigger()
End



Public Sub reindex_timer_Timer()
  Dim time_diff As Integer
  time_diff = DateDiff(plugin_indexer_gui.last_index_time, Now(), gb.Minute)
  Debug reindex_minutes_timeout - time_diff, "minutes to go"
  If time_diff >= reindex_minutes_timeout Then
    reindex_timer.stop
    ReIndex()
  Endif

End


Public indexing As Boolean = False
Private indexprocess As Process
Public Sub ReIndex()
  Dim r As Integer
  Dim depth, dir As String
  Dim cmdline As String
  Dim agrid As Tableview = plugin_indexer_gui.GridIndex
  Dim sPath As String
  If indexing Then Return
  reindex_timer.stop
  Try indexprocess.kill
  For r = 0 To aGrid.Rows.max
    sPath = aGrid[r, 1].text
    If Not (sPath Ends "/") Then sPath &= "/"
    depth = aGrid[r, 0].text
    'dir = "'" & sPath & "'"
    dir = Replace(sPath, " ", "\\ ")
    cmdline &= "; nice -n 19 ionice -c3 schedtool -B -e find -L " & dir & " -maxdepth " & depth & " \\( -xtype d -printf \"%p/\\n\" , -not -xtype d -print \\)"
  Next
  Try Kill index_file
  If cmdline Begins ";" Then cmdline = Right(cmdline, -1)
  cmdline = "sh -c " & "'" & cmdline & "'"
  cmdline &= "| sort -u > " & index_file
  Debug "Indexing..."
  Debug cmdline
  indexprocess = Shell cmdline As "indexprocess" 
  indexing = True
End

Public Sub indexprocess_kill()
  Debug "find process has ended, building index db."
  Try index_db = Split(File.Load(index_file), "\n")  
  Debug "Finished indexing"
  indexing = False
  
  plugin_indexer_gui.last_index_time = Now()
  plugin_indexer_gui.SaveSettings()
  reindex_timer.start
  plugin_indexer_gui.UpdateLabelIndexSize
End


Public Sub configure()
  'this starts the configuration window.
  plugin_indexer_gui.Show()
End


