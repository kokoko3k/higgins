' Gambas class file

Create Static
Static Public Description As String = ("Expression evaluator")
Static Public Friendly_name As String = ("Calculator")
Static Public configurable As Boolean = False
Static Public Default_enabled As Boolean = True
Static Public default_blocking As Boolean = True                  'Should the subsequent plugins be blocked when
                                                          'this plugin finds some results?
                                                          
Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates an action
  Action_p As Variant          'the parameter for Action
End Struct

Private plugin As String
Private iconsize As Integer
Private minchar As Integer = 3   'exit if the search term is lower than that




Public Sub _new(p_plugin As String, p_iconsize As Integer)

  plugin = p_plugin
  iconsize = p_iconsize
  
End

Private Sub trigged(query As String) As Boolean
  Dim lquery As String = Lower(query)
  If Left(lquery) = "=" Then Return True
  If Right(lquery) = "=" Then Return True
  
  If Len(lquery) < minchar Then Return False

  If InStr(lquery, "(") Then Return True
  If InStr(lquery, ")") Then Return True

  If InStr(lquery, "+") Then Return True  
  If InStr(lquery, "-") Then Return True
  If InStr(lquery, "*") Then Return True
  If InStr(lquery, "/") Then Return True

  If InStr(lquery, "^") Then Return True
  If InStr(lquery, "div") Then Return True
  If InStr(lquery, "%") Then Return True
  If InStr(lquery, "mod") Then Return True
  If InStr(lquery, "/") Then Return True
  
  If InStr(lquery, ">") Then Return True
  If InStr(lquery, "<") Then Return True
  
  If InStr(lquery, "and") Then Return True
  If InStr(lquery, "not") Then Return True
  If InStr(lquery, "or") Then Return True
  If InStr(lquery, "xor") Then Return True
  
  If InStr(lquery, "abs") Then Return True
  If InStr(lquery, "ceil") Then Return True
  If InStr(lquery, "dec") Then Return True
  If InStr(lquery, "fix") Then Return True
  If InStr(lquery, "floor") Then Return True
  If InStr(lquery, "frac") Then Return True
  If InStr(lquery, "inc") Then Return True
  If InStr(lquery, "int") Then Return True
  If InStr(lquery, "max") Then Return True
  If InStr(lquery, "min") Then Return True
  If InStr(lquery, "round") Then Return True
  If InStr(lquery, "sgn") Then Return True
  
  If InStr(lquery, "acos") Then Return True
  If InStr(lquery, "acosh") Then Return True
  If InStr(lquery, "and") Then Return True
  If InStr(lquery, "asin") Then Return True
  If InStr(lquery, "asinh") Then Return True
  If InStr(lquery, "atan") Then Return True
  If InStr(lquery, "atan2") Then Return True
  If InStr(lquery, "atanh") Then Return True
  If InStr(lquery, "cos") Then Return True
  If InStr(lquery, "cosh") Then Return True
  If InStr(lquery, "deg") Then Return True
  If InStr(lquery, "hyp") Then Return True
  If InStr(lquery, "mag") Then Return True
  If InStr(lquery, "pi") Then Return True
  If InStr(lquery, "sin") Then Return True
  If InStr(lquery, "sinh") Then Return True
  If InStr(lquery, "tan") Then Return True
  If InStr(lquery, "tanh") Then Return True
  If InStr(lquery, "rad") Then Return True
  
  If InStr(lquery, "cbr") Then Return True
  If InStr(lquery, "exp") Then Return True
  If InStr(lquery, "exp2") Then Return True
  If InStr(lquery, "exp10") Then Return True
  If InStr(lquery, "expm") Then Return True
  If InStr(lquery, "log") Then Return True
  If InStr(lquery, "log2") Then Return True
  If InStr(lquery, "log10") Then Return True
  If InStr(lquery, "logp") Then Return True
  If InStr(lquery, "sqr") Then Return True
  
  'some more controls here (?)
  Return False
End

Event new_results(rResults As RItemT[])

Public Sub find(textcontrol As Object) As RItemT[]
  'evualuate expressions
  Dim rResults As New RItemT[]
  Dim rResult As RItemT
  Dim current_search As String = textcontrol.text

  If Not trigged(textcontrol.text) Then Return

  rResult = create_item(current_search)
  If rResult <> Null Then rResults.Add(rResult)

  If textcontrol.text <> current_search Then Return
  Wait 
  Raise new_results(rResults)
  Return rResults

End

' Editable part of the template follows:

Private Function create_item(expr As String) As RItemT
  Dim return_item As RItemT
  Dim evalued As Variant

    If expr Begins "=" Then expr = Right(expr, -1)
    If expr Ends "=" Then expr = Left(expr, -1)
      Try evalued = Eval(expr)
      If Error Then Return

      return_item = New RItemT
      return_item.plugin = plugin
      return_item.Action = "NULL"
      return_item.Action_p = ""
      return_item.Clipboard_data = evalued

      return_item.image_file = "icon:/" & iconsize & "/calculator"

      If evalued = True Then evalued = ("-1 (boolean TRUE)")
      If evalued = False Then evalued = ("0 (boolean FALSE)")

      return_item.Text = evalued
      return_item.SubText = "= " & expr

    Return return_item
End

