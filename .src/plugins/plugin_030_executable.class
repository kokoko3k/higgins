' Gambas class file

Create Static
Static Public Description As String = ("Executables launcher")
Static Public Friendly_name As String = ("Executables")
Static Public configurable As Boolean = False
Static Public Default_enabled As Boolean = True
Static Public default_blocking As Boolean = False                 'Should the subsequent plugins be blocked when
                                                          'this plugin finds some results?
                                                          
Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates an action
  Action_p As Variant          'the parameter for Action
End Struct


Private plugin As String
Private iconsize As Integer
Private minchar As Integer = 3   'exit if the search term is lower than that

Private terminal_emulator As String = ""


Public Sub _new(p_plugin As String, p_iconsize As Integer)

  plugin = p_plugin
  iconsize = p_iconsize

End

Private Sub trigged(query As String) As Boolean
  If Len(query) < minchar Then Return False
  'some more controls here (?)
  Return True
End

' Editable part of the template follows:

Public Sub find(textcontrol As Object) As RItemT[]
  'search for filedialogs bookmarks
  Dim rResults As New RItemT[]
  Dim rResult As RItemT
  Dim current_search As String = textcontrol.text
  Dim exe_found, cmd As String

  If Not trigged(textcontrol.text) Then Return

  If Exist(current_search, True) Then
    If Stat(current_search, True).type = gb.Directory Then Return
  Endif
  
  cmd = Split(current_search, " ", "", True)[0]

  Try exe_found = System.Find(cmd)
  If exe_found = "" Then Return

  terminal_emulator = Settings["terminal_emulator"]
    
  rResult = create_item(current_search, False)
  If rResult <> Null Then rResults.Add(rResult)
  
  rResult = create_item(current_search, True)
  If rResult <> Null Then rResults.Add(rResult)

  Raise new_results(rResults)
End

Event new_results(rResults As RItemT[])


Private Function create_item(result As String, Optional terminal As Boolean = False) As RItemT
  Dim return_item As RItemT
  Dim cmdterm As String
  Dim cmd, params As String
  
  cmd = Split(result, " ")[0]
  params = Right(result, -Len(cmd))
  
    return_item = New RItemT
    return_item.plugin = plugin
    return_item.Clipboard_data = System.Find(cmd) & " " & params
    return_item.action = "EXEC"

    If terminal Then
      If terminal_emulator <> "" Then terminal_emulator = System.Find(terminal_emulator)
      If terminal_emulator = "" Then
        Debug "No terminal emulator configured, guessing..."
        terminal_emulator = Global.find_term()
        If terminal_emulator = "" Then
          Debug "Sorry, could not find any terminal emulator"
          Return
        Endif
      Endif
      cmdterm = Global.terminal_cmdline(terminal_emulator, result)
      return_item.Action_p = cmdterm
      return_item.image_file = "icon:/" & iconsize & "/terminal"
      return_item.Text = "Run " & result
      return_item.SubText = "Run " & result & " in the terminal emulator"

        Else ' no terminal

      return_item.Action_p = result
      return_item.image_file = "icon:/" & iconsize & "/exec"
      return_item.Text = result
    Endif
    Return return_item
End



' Public Function configure()
'   
'  '
'   
' End
