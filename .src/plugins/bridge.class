' Gambas class file

Create Static
Static Public Description As String = "Bridge to external plugin"    'A description for this plugin
Static Public Friendly_name As String = "Bridge Plugin"   'A friendly name for this plugin
Static Public configurable As Boolean = False             'Does this plugin provides a configure() method?
Static Public Default_enabled As Boolean = False          'Does this plugin have to be enabled by default?

Private wait_time As Float = 0.0005 
Private queue_size As Integer = 10 ' item queue size

Public Sub _free()
    Stop() 
End


Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates an action
  Action_p As Variant         'the parameter for Action
End Struct


Private plugin As String
Private iconsize As Integer
Private minchar As Integer = 0 'The plugin will not operate on query text smaller than that


Private ext As Process
Private ext_plugin As String '= "/root/tmp/locate.sh"

Public Sub _new(p_plugin As String, p_iconsize As Integer, p_plugin_execuatble_filename As String)
  plugin = p_plugin
  iconsize = p_iconsize
  ext_plugin = p_plugin_execuatble_filename
End



Public Sub Stop()
  If ext <> Null Then
      Try Flush #ext
      Try ext.Close
      Try ext.kill
  Endif
  items.clear
End


Private Sub trigged(query As String) As Boolean
  'this function will decide if the plugin will be search for "query" or not.
  If Len(query) < minchar Then Return False
  'some more controls here (?)
  Return True
End


Private textcontrol_copy As Object

Public Sub find(textcontrol As Object) As RItemT[]
  'this is the main function, textcontrol is an object that exposes a "text" property.
  'We need to pass an entire object reference instead of a simple string so that
  'we can stop a (slow) plugin as soon as textcontrol.text changes (ie: the user is still typing...)

  Dim current_search As String = textcontrol.text
  textcontrol_copy = textcontrol


  Stop()
    
  If Not trigged(textcontrol.text) Then Return

  ext = Shell ext_plugin & " " & current_search For Input As "ext"
  ext.tag = current_search
   While ext.state = Process.running 'async wait for process to end.
     Wait 0.01
   Wend
  
  If current_search <> textcontrol.text Then Return
  
  Return items
  

End


Private current_item As RItemT
Private items As New RItemT[]

Private t0 As Float = 0
Private interval As Float = 0

Public Sub ext_read()
  Dim iLine As String
  Dim push As Boolean = False
  Line Input #ext, iLine
  
    If ext.tag <> textcontrol_copy.text Then
      Debug "Cancelled previous search " & ext.tag
      Return
    Endif 
  
  iLine = Trim(iLine)

  Select iLine
    Case "BEGIN"
      current_item = New RItemT
      current_item.plugin = "external"

    Case Like "Text=*"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      current_item.Text = Right(iLine, -InStr(iLine, "="))

    Case Like "SubText=*"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      current_item.SubText = Right(iLine, -InStr(iLine, "="))
      
    Case Like "Image_file=*"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      current_item.Image_file = Right(iLine, -InStr(iLine, "="))
      
    Case Like "Clipboard_data=*"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      current_item.Clipboard_data = Right(iLine, -InStr(iLine, "="))
      
    Case Like "Action=*"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      current_item.Action = Right(iLine, -InStr(iLine, "="))
      
    Case Like "Action_p=*"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      current_item.Action_p = Right(iLine, -InStr(iLine, "="))
      
    Case "END"
      If current_item = Null Then 
        Debug "Error: Item not yet initialized, missing \"BEGIN\"?"
        Return
      Endif
      items.Add(current_item)
      interval = Timer() - t0
      push = (items.count >= queue_size)
      push = push Or (t0 = 0) 
      push = push Or interval > 0.1
      If push Then 
        Raise new_results(items)
        items.Clear
        t0 = Timer()
      Endif  
            
  End Select

End





Public Sub configure()
 
  'this starts the configuration window.
  
End

Event new_results(rResults As RItemT[])

