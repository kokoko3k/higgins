' Gambas class file

Public xb As XbindKeys
Public Const appname As String = "higgins"
Public Confpath As String = Settings.defaultdir & "/" & appname
Public extbinpath As String = Settings.defaultdir & "/" & appname & "/extbin"
Public xb_rcpath As String = confpath & "/higgins.xb.rc"
Private not_save_hsize As Boolean = False
Public timer_expand_check As Timer


Public Struct rItemT
  plugin As String            'the plugin name
  Text As String              'text displayed in the clipboard
  SubText As String           'text displayed under the main text
  Image_file As String        'optional image displayed (fullpath or "DefferredMimeIcon")
  Clipboard_data As String    'the data copied to the clipboard
  Action As String            'string that indicates what to do when activating an item:
  Action_p As Variant         'the parameter for Action
End Struct

Public results_file As String = Temp()
Public results_list As New RItemT[]
Public picture_list As New Collection
Public rSize As Integer
Public Socket_File As String = Confpath & "/socket"
Public Lock_File As String = Confpath & "/lock"
Private plugins_enabled As String[]
Private plugins_all As String[]

Public Sub resize_form()
  Dim pad As Integer
  If panel2.padding = 0 Then 
    pad = Desktop.scale
      Else
    pad = panel2.padding
  Endif
  check_min_size(True)
  form_resize()
End  

Public textbox1_change_delay As Timer 

Public Sub textbox1_change_delay_timer()
 immediate_search(textbox1)
 textBox_change_noglitch(textbox2, complete(textbox1.text))
End


Public Sub Trim_textobj_atomic(textcontrol As Object)
  Dim t As String
  Return 'stubbed
  Try t = Object.GetProperty(textcontrol, "text")
  If Error Then
    Debug "Called on a control without text property or what!?"
    Return
  Endif
  
  Object.Lock(textcontrol)
  textbox1.text = Trim(textcontrol.text)
  Object.Unlock(textcontrol)
End


Public Sub TextBox1_Change()

  Dim p_previous_search, current_search As String
  Dim c As String
  Dim bWasfocused As Boolean
  Dim c0 As Integer
  Dim tSelection_start, tSelection_length As Integer
  Dim fLag As Float
  
  global.object_lock(TextBox1)
  c = Complete(TextBox1.text)

  textBox_change_noglitch(textbox2, c)
  global.object_unlock(TextBox1)
                                              'Debug
  Try current_search = TextBox1.text 
  If Error Then Return
                                                  'Debug
  Wait 0.01 'glitch textbox

  If Len(current_search) < 2 Then 
    previous_search = ""
    resize_form()
    reinit()
    Return
  Endif

  Try p_previous_search = TextBox1.text
  If Error Then Return

  Try fLag = CFloat(Settings["input_lag", "0.1"])
  If Error Then 'auto
    fLag = Max(0, 5 - String.Len(textbox1.text)) / 10
  Endif
  Debug flag
  Wait fLag
  
  If p_previous_search <> textbox1.text Then 
    Goto returnlabel 'user is typing
  Endif

  immediate_search(textbox1)

  Try Wait 0.3


  Try current_search = TextBox1.text 
  If Error Then Return
  If p_previous_search <> current_search Then Goto Returnlabel
                                                    'Debug
  'If resultgrid.Rows.count > 0 Then showgrid
returnlabel:
  'qt5 antiglitch...
      bWasfocused = textbox1.HasFocus
      c0 = textbox1.Pos
      tSelection_start = textbox1.selection.Start
      tSelection_length = textbox1.Selection.Length
      textbox1.Hide
      textbox1.show
      If bWasfocused Then textbox1.SetFocus
      textbox1.pos = c0
      textbox1.Select(tSelection_start, tSelection_length)

  If resultgrid.current = Null Then Try resultgrid.Rows[0].Selected = True    
End


Public Sub initgrid()
  ResultGrid.columns.count = 1
  ResultGrid.Rows.count = 0
  ResultGrid.mode = Select.Single
  ResultGrid.Show()
  Wait
End

Public Sub reinit(Optional WithGrid As Boolean = True)

  results_list.Clear()
  picture_list.Clear()
  If withgrid Then initgrid()
  MyDesktop.init()
  mouse_normal()

End

Private plugins As New Collection 'a collection of plugin instances


Public Sub load_plugin(plugin_name As String, iconsize As Integer)
  Dim myplugin As Object
  If Not (plugin_name Begins "EXT:") Then 
      Try myplugin = Object.New(plugin_name, [plugin_name, iconsize])
      Else
    Try myplugin = Object.New("bridge", [plugin_name, iconsize, extbinpath & "/" & Right(plugin_name, -InStr(plugin_name, ":"))])
  Endif
  If Error Then
    Debug "Couldn't load " & plugin_name
    Return
  Endif
  Debug plugin_name
  plugins[plugin_name] = myplugin
  Object.Attach(myplugin, fmain, "plugin_event")

End

Public Sub unload_plugin(plugin_name As String)

  Dim my_plugin As Object
  Try my_plugin = plugins[plugin_name]
  If Error Then Return
  plugins.Remove(plugin_name)
  Try Object.Call(my_plugin, "stop")
  my_plugin = Null

End

Private previous_search As String

'Private Sub showgrid()
  ' Dim pad As Integer
  ' Dim minh As Integer = resultgrid.Font.TextHeight("|") * 7
  ' If (fmain.h > resultgrid.h) Then 
  '   If fmain.h > minh Then Return 'grid is already visible
  ' Endif
  ' 
  ' If panel2.padding = 0 Then 
  '   pad = Desktop.scale
  '     Else
  '   pad = panel2.padding
  ' Endif
  ' not_save_hsize = True
  ' FMain.h = Max(global.form_open_h, TextBox1.h + (pad * 3) + Max(resultgrid.h, minh))
  ' gstyle.make_background()
'End

Public Sub immediate_search(textcontrol As Object)

  Dim aPlugin As String
  Dim t0 As Float
  Dim iResults As Integer
  Dim is_blocking As Boolean
  Dim current_search As String = ""

  timer_expand_check = New Timer As "timer_expand_check"

  Trim_textobj_atomic(textcontrol)
  If previous_search = textcontrol.text Then 
    Return 'don't know why this is important, but works.
  Endif
  previous_search = textcontrol.text 'don't know why this is important, but works.
  current_search = textcontrol.text
  reinit(False)
  mouse_busy()
  
  Debug "starting search...", textcontrol.text
  'For Each aplugin In plugins

  For Each aplugin In plugins_enabled
    If current_search <> textcontrol.text Then
      Debug "[!!] Search terms changed while iterating plugins. aborted queued search for " & current_search
      Return 
    Endif

    t0 = Timer()
    Debug "[STARTING ID]", aplugin
    iResults = 0
    iResults = run_plugin(aPlugin, textbox1)
    is_blocking = False
    Try is_blocking = Object.GetProperty(Class.Load(aPlugin), "default_blocking")
    If is_blocking Then 
      If iResults > 0 Then
        Debug "got results from a blocking plugin: " & aPlugin
        Break
      Endif
    Endif
    Debug "[END]", aplugin, "time:", Timer() - t0
  Next
  Debug "Search ends here."
  
  
  ResultGrid.Rows.count = results_list.Count
  mouse_normal()
End

Public Function timer_expand_check_timer()
  Dim newh As Integer = 0
  Dim pad As Integer = 0 

  If resultgrid.current = Null Then Try resultgrid.Rows[0].Selected = True
  
   If panel2.padding = 0 Then 
      pad = Desktop.scale
        Else
      pad = panel2.padding
   Endif
  
  not_save_hsize = True
  
  If resultgrid.Rows.count = 0 Then 
    resultgrid.visible = False
    check_min_size(True)
    Return
      Else
    resultgrid.visible = True
    newh = (resultgrid.Rows.count * resultgrid.Rows.Height) + fmain_minh() + pad * 2
    fmain.h = Min(global.form_open_h, newh)
    form_Resize()
  Endif
End


Public Function run_plugin(plugin_name As String, textcontrol As Object) As Integer

  Dim rResults As RItemT[]

  Try rResults = Object.Call(plugins[plugin_name], "find", [textcontrol]) 'call the find method
  'Object.Call(plugins[plugin_name], "find", [textcontrol]) 'call the find method
  If Error Then Debug "Could not query " & plugin_name
  If rResults = Null Then Return
  
  'results_list.Insert(rResults)
  'ResultGrid.Rows.count += rResults.Count
  Return rResults.Count
End

Public Sub plugin_event_new_results(rResults As RItemT[])
  Dim pre_result_count As Integer
  If rResults.max = -1 Then
    Return
  Endif

  results_list.add(rResults.last)

  pre_result_count = ResultGrid.Rows.count
  
  ResultGrid.Rows.count = results_list.count
  
  'spare cpu by not checking if results are already more than 50
  If pre_result_count < 50 Then
    timer_expand_check.Trigger  
  Endif
  
End

Private lastdata As New _GridView_data[]

Public Sub ResultGrid_Data(Row As Integer, Column As Integer)
  Dim rcResult As New RItemT
  
  If row > results_list.max Then
    If lastdata[row] <> Null Then
      Try resultgrid.Data.richtext = lastdata[row].RichText
      Try resultgrid.Data.picture = lastdata[row].picture
    Endif  
    Return
  Endif

  
  resultgrid.Data.Foreground = Global.textgrid_foreground
  rcResult = results_list[Row]


  'two lines:
  resultgrid.data.RichText = "<b>" & rcResult.text & "</b>"
  'resultgrid.data.RichText = "<font size=+1>" & rcResult.text & "</font>"
  If rcResult.subtext <> "" Then 
    resultgrid.data.RichText &= "<br><font size=-1>" & rcResult.subtext & "</font>"
  Endif
  
  'find pic from cache?
  If picture_list[row] <> Null Then
    resultgrid.Data.Picture = picture_list[row] 
    Return
  Endif
  
  'no cache :(
  If rcResult.image_file Like "mimetype://*" Then 
    Try resultgrid.Data.Picture = MyDesktop.Get_mime_Icon(Right(rcResult.image_file, -11), rSize)
    Goto fallback
  Endif
  
  If rcResult.image_file Like "desktopfile://*" Then 
    MyDesktop.init()
    MyDesktop.parse(Right(rcResult.image_file, -14))
    Try resultgrid.Data.Picture = MyDesktop.GetIcon(MyDesktop.dIconName, rSize).picture
    Goto fallback
  Endif
  
  If rcResult.image_file Like "resize://*" Then 
    'Stop
    'need a mimetype cache here or is slow
    Try resultgrid.Data.Picture = Global.Load_image(Right(rcResult.image_file, -9), rSize).Picture
    Goto fallback
  Endif
  
fallback:
  If (resultgrid.Data.Picture = Null) Then 
    Try resultgrid.Data.Picture = Picture[rcResult.image_file]
  Endif
  If resultgrid.Data.Picture = Null Then 
    Try resultgrid.Data.Picture = rcResult.hApp.GetIcon(rSize).Picture
  Endif
  
  If resultgrid.Data.picture = Null Then
    resultgrid.Data.Picture = Picture["icon:/" & rSize & "/file"]
  Endif
  
  'cache picture
  If resultgrid.Data.picture <> Null Then picture_list[row] = resultgrid.Data.picture
  
  lastdata.Resize(resultgrid.Rows.count)
  lastdata[row] = ResultGrid.data
  
End

Public Sub mouse_busy()

  fmain.mouse = Mouse.Wait
  TextBox1.mouse = Mouse.wait

End

Public Sub mouse_normal()
 fmain.mouse = Mouse.Default
 TextBox1.mouse = Mouse.default
End

Public Sub start_item(i As Integer)

  Dim rcResult As RItemT
  Dim p As String  

  If results_list.count = 0 Then Return
  rcResult = results_list[i]  
  
  p = rcResult.Action_p

  Select Case rcResult.Action
    Case "DESKTOPOPEN"
      'If Lower(p) Ends ".desktop" Then 
      If global.IsDesktopFile(p) Then
        start_dot_desktop_exe(p)
      Else
        Desktop.Open(p)
        add_history(p)
      Endif
    Case "EXEC"
      Shell p 'For Input Output
    Case "EXEC_TERMINAL"
      start_executable_terminal(p)
    Case "CLIPBOARD"
      Clipboard.Copy(P)
    Case "XDGOPEN"
      Desktop.Open(p)
      add_history(p)
    Case "WINDOWS"
      Try Desktop.Windows.FromHandle(p).Activate
    Case "GUESS"
      If Exist(p, True) Then
        
        'desktop files with full path
        'If Lower(p) Ends ".desktop" Then
        If global.IsDesktopFile(p) Then
          start_dot_desktop_exe(p)
          Return
        Endif
        
        'directory
        If Stat(p, True).type = gb.Directory Then
          Desktop.Open(p)
          add_history(p)
          Return
        Endif
        
        'executables
        If is_executable(p) Then 
          start_executable(p)
          Return
        Endif
        
        'all of the others
        Desktop.Open(p)
        add_history(p)
        Return
        
      Endif
      
    Case "NULL"
      Return
      
    Case Else
      
  End Select
  
End


Public Sub start_dot_desktop_exe(sPath As String)
  Dim exe As String
  Dim field_codes As String[] = ["f", "F", "u", "U", "d", "D", "n", "N", "v", "m"]
  Dim terminal_emulator As String
  Dim code As String

  MyDesktop.parse(sPath)
  
  If MyDesktop.dExec <> "" Then
    exe = MyDesktop.dExec
      Else
    If MyDesktop.dXKDEServiceTypes <> "" Then
      'exe = "kcmshell5 " & MyDesktop.dXKDELibrary
      exe = "kioclient5 exec " & sPath
    Endif
  Endif

  'strip args
  For Each code In field_codes
    exe = Replace(exe, " %" & code & " ", " ")
    If exe Ends " %" & code Then exe = Left(exe, -3)
  Next
  
  'fill args
  exe = Replace(exe, "%i", "--icon " & "\"" & MyDesktop.dIconName & "\"")
  exe = Replace(exe, "%c", "\"" & MyDesktop.dname & "\"")
  exe = Replace(exe, "%k", "\"" & sPath & "\"")
  

  If MyDesktop.dTerminal Then 
    terminal_emulator = settings["terminal_emulator", Global.find_term()]
    If MyDesktop.dPath <> "" Then exe = "cd " & MyDesktop.dPath & " ; " & exe
    Shell Global.terminal_cmdline(terminal_emulator, exe)
  Else
    If MyDesktop.dPath <> "" Then
      Shell exe With ["PWD=" & MyDesktop.dPath] 'For Input Output
        Else
      Shell exe
    Endif
  Endif

End

Public Sub start_executable_terminal(sPath As String)
  Dim terminal_emulator As String
    terminal_emulator = settings["terminal_emulator", Global.find_term()]
    Shell Global.terminal_cmdline(terminal_emulator, sPath)
End


Public Sub start_executable(ePath As String)

  Dim msgout As String
  msgout = Message.Question(("Execute file?"), "Execute", "Cancel")
  
  Select msgout
    Case 1
      Shell ePath 'For Input Output
    Case 2
      Return
  End Select
  
End

Public Function is_executable(fPath As String) As Boolean

  Dim bout As String
  Dim singlecommand As Boolean = False
  Dim splitted As String[]
  Dim exe As String
  
  splitted = Split(fPath, ";| &\n", "", True)
  singlecommand = splitted.count = 1
  If Not singlecommand Then singlecommand = singlecommand Or ((fpath Begins "\"") And (fpath Ends "\""))
  If Not singlecommand Then singlecommand = ((fpath Begins "'") And (fpath Ends "'"))
  
  If singlecommand Then 
    exe = fPath 
  Else 
    exe = splitted[0]
  Endif
  
  'has to exist
  If Not Exist(exe, True) Then Return False
  'has to be a file
  If Stat(exe, True).type <> gb.File Then Return False
  'needs executable permissions
  Shell "bash -c \"[[ -x '" & exe & "' ]] && echo executable \"" To bout
  If (Trim(bout) = "") Then Return False
  'needs to have the right mimetype
  If Not MyDesktop.mime_exe(exe) Then Return False
  'right then!
  Return True

End

Public Sub ResultGrid_activate()
  If results_list[resultgrid.row].Action_p = Null Then Return
  start_item(resultgrid.row)
  TimerClose.Trigger
End

Public Sub TextBox1_KeyPress()
  
  Select Key.Code

    Case Key.end 'fill complete
      global.object_lock(textbox1)
      If textbox1.pos = Len(textbox2.Text) Then
        global.object_unlock(textbox1)
        Return
      Endif
      If textbox1.pos = textbox1.Length Then
        If textbox2.text <> "" Then 
          textbox1.text = textbox2.text
          textbox1_change_delay.Trigger()
        Endif
      Endif
      global.object_unlock(textbox1)
      
    Case Key.right 'fill complete

      global.object_lock(textbox1)
      If textbox1.pos = textbox1.Length Then
        textBox_change_noglitch(textbox1, textbox1.text & Mid$(textbox2.text, Len(textbox1.text) + 1, 1))
        textbox1_change_delay.Trigger()
      Endif
      global.object_unlock(textbox1)
      
    Case Key.down
      If resultgrid.Rows.count > 0 Then 
        timer_expand_check.Trigger()
        ResultGrid.SetFocus()
        resultgrid.visible = True
        resultgrid.row += 1
      Endif

    Case Key.PageDown
      If resultgrid.Rows.count > 0 Then 
        resultgrid.visible = True
        timer_expand_check.Trigger()
        ResultGrid.SetFocus()
      Endif
      
    Case Key.enter
      If ResultGrid.row >= 0 Then  
        If results_list[resultgrid.row].Action_p = Null Then Return
        Try start_item(resultgrid.row)
        If Not Error Then timerClose.Trigger()
      Else
        Try resultgrid.row = 0
      Endif
      
    Case Key.Return
      If ResultGrid.row >= 0 Then  
        If results_list[resultgrid.row].Action_p = Null Then Return
        Try start_item(resultgrid.row)
        If Not Error Then timerClose.Trigger()
      Else
        Try resultgrid.row = 0
      Endif
    
    Case Key.Up
     textBox_change_noglitch(textbox2, complete(textbox1.text, True))
  End Select

  Catch
    Debug "Warning, error in TextBox1_KeyPress!"

End

Public Sub ResultGrid_KeyPress()
  Dim dirname As String
  Select Key.Code
    Case Key.Enter
      If ResultGrid.row < 0 Then Return
      If results_list[resultgrid.row].Action_p = Null Then Return
      start_item(resultgrid.row)
      TimerClose.trigger
    Case Key.Return
      If ResultGrid.row < 0 Then Return
      If results_list[resultgrid.row].Action_p = Null Then Return
      start_item(resultgrid.row)
      TimerClose.trigger
    Case Key.up
      If ResultGrid.Rows[0].Selected Then TextBox1.SetFocus()
    Case Key.PageUp
      If ResultGrid.Rows[0].Selected Then TextBox1.SetFocus()


    Case Key.right 'browse the filesystem, go inside folders
      If ResultGrid.row < 0 Then Return
      'If results_list[resultgrid.row].plugin Ends "_LS" Or (results_list[resultgrid.row].plugin Ends "_INDEXER") Then
        dirname = results_list[resultgrid.row].Action_p
        If Exist(dirname, True) Then
          Object.Lock(textbox1)
          textbox1.text = dirname
          textbox1_change_delay.Trigger()
          textBox_change_noglitch(textbox2, Complete(TextBox1.text))
          Object.unLock(textbox1)
        Endif
        Stop Event
      'Endif 

 
    Case Key.left 'browse the filesystem go up in folders
      If Not Exist(textbox1.text, True) Then Return
      'Debug "LOCKING TEXTBOX1"
      Object.Lock(textbox1)
        textbox1.text = File.Dir(textbox1.text)
         textbox1_change_delay.Trigger()
        textBox_change_noglitch(textbox2, Complete(TextBox1.text))
      'Debug "UNLOCKING TEXTBOX1"
      Object.unLock(textbox1)
      Stop Event

      
    Case Else
      If Key.text <> "" Then SelectFileviewFromKey(Lower(Left(Key.text)))
  End Select
End




Private Sub SelectFileviewFromKey(k As String)
  Dim s, ss As Integer
  If resultgrid.Rows.count = 0 Then Return
  ss = resultgrid.Row 
  For s = resultgrid.Row + 1 To resultgrid.Rows.Max
    If Lower(results_list[s].text) Begins k Then 
      resultgrid.row = s
      Return
    Endif
  Next
  
  If ss = 0 Then Return ' we searched the entire list
  
  'if not found there, start from the beginning
  For s = 0 To ss
    If Lower(results_list[s].text) Begins k Then 
      resultgrid.row = s
      Return
    Endif
  Next
  
End


Public Sub MenuOpenFolder_Click()
  If resultgrid.row < 0 Then Return
  If results_list[resultgrid.row].Action_p = Null Then Return
  Try Desktop.Open(File.Dir(results_list[resultgrid.row].Action_p))
  TimerClose.Trigger

End

Public Sub MenuOpenFile_Click()
  If resultgrid.row < 0 Then Return
  If results_list[resultgrid.row].Action_p = Null Then Return
  start_item(resultgrid.row)
  TimerClose.Trigger
End

Public Sub MenuCopy_Click()
  If resultgrid.row < 0 Then Return
  Clipboard.Copy(results_list[ResultGrid.row].Clipboard_data)
End

'======================================== START SOCKET FUNCTIONS ========================================

Public My_listening_socket As ServerSocket

Public hLock As Stream

Public Sub socket_init()
  'TRY TO get a LOCK file:

  Try hLock = Lock Lock_File
  If Error Then 'alreadyrunning
    Debug "another instance already running"
    show_other_instance()
    Quit
  Endif
  'start to listen for remote commands, one connection is ok.
  My_listening_socket = New ServerSocket As "My_listening_socket"
  My_listening_socket.type = Net.Unix
  My_listening_socket.path = Socket_File
  My_listening_socket.Listen(1)

End

Public MyCSock As Socket

Public Sub show_other_instance()

  Dim sBuf As String
  MyCSock = New Socket
  MyCSock.path = Socket_File
  MyCSock.Port = Net.Local
  MyCSock.Connect()
  While (MyCSock.Status <> 7) And (MyCSock.Status > 0)
    Wait 0.1
  Wend
  If MyCSock.Status = 7 Then
    sBuf = "show\n"
    Write #MyCSock, sBuf, Len(sBuf)
    Close #MycSock
  Endif

End

Public Host As Object

Public Sub My_listening_socket_connection(RemoteHostIP As String)
  'just accept on localhost.

  host = My_listening_socket.Accept()

End

Public Sub socket_Read()

  Dim command As String = ""
  Dim old_visible As Boolean = fmain.visible
  Line Input #Last, command
  If command = "show" Then
    Repeat
      fmain.visible = Not (old_visible)
      Wait
    Until fmain.visible = Not (old_visible)
  Endif
  My_listening_socket.close
  My_listening_socket.Listen(1)

End

'-- END SOCKET FUNCTIONS ---------------------------------------------------------------------

'--- TRYICON RELATED

Public TrayIcon2 As Trayicon

Public Sub InitTrayIcon()
  
  Dim SystemTray As Boolean
  SystemTray = False
  Try SystemTray = desktop.HasSystemTray
  If Error Then
    Debug "Error while checking if your desktop has a system tray, assuming it has..."
    SystemTray = True
  Endif
  
  If Not SystemTray Then
    Debug "System tray is missing; checking for it later..."
    InitTrayIconChecker = New Timer As "InitTrayIconChecker"
    InitTrayIconChecker.delay = 5000
    InitTrayIconChecker.start
    Return
  Endif
  
  Try TrayIcon2 = New Trayicon 
  If Error Then 
    Debug "Cannot Init Trayicon"
    Return
      Else
    Try InitTrayIconChecker.stop
  Endif
  TrayIcon2.Picture = Picture["appicon.png"]
  TrayIcon2.Visible = True
  object.Attach(TrayIcon2, Me, "TrayIcon2")
  TrayIcon2.PopupMenu = "TrayMenu"


End

Public InitTrayIconChecker As Timer

Public Sub InitTrayIconChecker_timer()
    InitTrayIcon()
End



Public Sub TrayIcon2_click()
  If fmain.visible Then 
    MySettings.save()
    fmain.Hide()
      Else
    fmain.Show()
  Endif

End

Public Sub MenuTrayOptions_Click()

  hSettings.Show()

End

Public Sub QuitMenuTray_Click()
  myQuit()
End

Public Sub MenuTrayShow_click()
  If fmain.visible Then
    MySettings.save()
    fmain.Hide()
      Else
    fmain.Show()
  Endif
  'Form_Show()

End

'-- END TRAYICON FUNCTIONS ---------------------------------------------------------------------

'-- XBINDKEYS ---------------------------------------------------------------------

Public Sub xb_HotkeyPressed(action As String)

  If action = "show" Then
    If fmain.visible Then
      MySettings.save()  
      form_hide()
    Else
      fmain.Show()
    Endif
  Endif

End

Public Sub xb_show_init_error(Optional force As Boolean = False)
  Message.optional("Could not initialize xbindkeys, Is it installed?,Shortcuts will not work!", "Ok", "hide_xbindkeys_not_installed", "error", force)
  Settings.Save()
End


Public Sub setup_xbindkeys()
  Shell "for p in `pidof xbindkeys_higgins` ; do kill $p ; done" Wait
  Wait 0.1
  Shell "killall -9 xbindkeys_higgins &>/dev/null" Wait
  xb = New XbindKeys(xb_rcpath, confpath & "/xbindkeys_higgins", hsettings) As "xb"
  If xb.init_error Then
    xb_show_init_error()
    Return
  Endif
End

'-- END XBINDKEYS ---------------------------------------------------------------------

Private Function plugins_ordered_array() As String[]
  Dim i As Integer
  Dim t As String
  
  Dim plugins_saved As New String[]
  Dim plugins_available As New String[]

  'pick a list from already saved plugins
  Try plugins_saved = Split(Settings["hsettings/plist_all"])

  'pick a list of all available plugins and 
  plugins_available = Dir(".gambas", "PLUGIN_*").Sort()
  For i = plugins_available.max DownTo 0
    If (plugins_available[i] Ends "_GUI") Then plugins_available.Delete(i)
  Next  

  For Each t In Dir(extbinpath, "", gb.file)
    plugins_available.add("EXT:" & t)  
  Next
  

  'delete from saved plugins every plugin not available
  For i = plugins_saved.max DownTo 0
    If plugins_available.Find(plugins_saved[i]) < 0 Then plugins_saved.Delete(i)
  Next
 
  'append to the plugins the ones missing from saved plugins
  For i = 0 To plugins_available.max
    If plugins_saved.Find(plugins_available[i]) < 0 Then plugins_saved.Add(plugins_available[i])
  Next

  'return valid plugins
  Return plugins_saved
 
End


Public Sub Delete_childs(parent As Object, Optional preserve As Object)
  'delete all objects that are child of "parent"
  Dim child As Object
  Dim child_is_parent As Boolean = False
  If preserve = Null Then preserve = parent
  For Each child In parent.children
    child_is_parent = False
    Try child_is_parent = child.children.count > 0
    If child_is_parent Then Delete_childs(child, preserve)
    child.Delete
  Next
End


Public Sub init_hSettings(Optional redraw As Boolean = False)
  Dim plugin_name As String  
  Dim plist As String 
  Dim plugin_class As Class
  Dim plugin_is_enabled As Boolean
  Dim plist_all As New String[]
  Dim ext_module As String

  plugins_enabled = New String[]
  
  Try plist = Settings["hsettings/plist"]
  If Not Error Then plugins_enabled = Split(plist)

  Delete_childs(hsettings.Frame1)

  For Each plugin_name In plugins_ordered_array()
    plugin_is_enabled = (plugins_enabled.find(plugin_name) > -1)
    If Not plugin_is_enabled Then 'check if this is a newcomers and wants to be enabled by default
      plist_all = Split(Settings["hsettings/plist_all"])
      If plist_all.Find(plugin_name) < 0 Then 'newcomers!
        Try plugin_class = Class.Load(plugin_name)
        If Not Error Then
          Try plugin_is_enabled = Object.GetProperty(plugin_class, "Default_enabled")
        Endif
      Endif
    Endif
    Draw_plugin(plugin_name, plugin_is_enabled, redraw)
  Next
  save_plugin_list() 

End



Public Sub Draw_plugin(plugin_name As String, enabled As Boolean, Optional redraw As Boolean = False)
  Dim o_hbox As Hbox
  Dim o_checkbox As Checkbox
  Dim o_button, o_buttonup, o_buttondown As Button
  Dim o_label As Label
  Dim friendly_name, description As String
  Dim plugin_class As Class
  Dim configurable As Boolean = False
  Dim o_separator As Separator

    Try plugin_class = Class.Load(plugin_name)
    If (Not Error) Or (plugin_name Begins "EXT:") Then
      If Not (plugin_name Begins "EXT:") Then
        description = Object.GetProperty(plugin_class, "Description")
        friendly_name = Object.GetProperty(plugin_class, "Friendly_name")
        configurable = False
        Try configurable = Object.GetProperty(plugin_class, "Configurable")
          Else
        description = ("Bridge to external plugin")
        friendly_name = Right(plugin_name, -InStr(plugin_name, ":"))
        configurable = False
      Endif
    Else
      friendly_name = plugin_name
    Endif
    
    o_hbox = New HBox(hSettings.frame1)
    o_hbox.h = hSettings.Font.TextHeight("|") * 1.5

        
    o_checkbox = New Checkbox(o_hbox) As "plugin_checkbox"
    o_checkbox.text = friendly_name
    o_checkbox.AutoResize = True
    o_checkbox.tag = plugin_name
    o_checkbox.Font.Bold = True
    o_checkbox.Expand = True
    
    global.object_lock(o_checkbox)
      If enabled Then
        o_checkbox.value = CheckBox.True
        If (Not redraw) Then load_plugin(plugin_name, rsize)
      Else
        o_checkbox.value = CheckBox.false
      Endif
    global.object_unlock(o_checkbox)
    
    If configurable Then
      o_button = New Button(o_hbox) As "plugin_configure"
      o_button.Border = False
      o_button.tag = plugin_name
      o_button.w = hSettings.Font.TextHeight("|") * 1.5
      o_button.Picture = Picture["icon:/medium/options"]
    Endif
    
    o_buttondown = New Button(o_hbox) As "o_buttondown"
    o_buttondown.border = False
    o_buttondown.w = o_hbox.H
    o_buttondown.picture = Picture["icon:/medium/down"]
    o_buttondown.tag = plugin_name
    
    o_buttonup = New Button(o_hbox) As "o_buttonup"
    o_buttonup.border = False
    o_buttonup.w = o_hbox.H
    o_buttonup.picture = Picture["icon:/medium/up"]
    o_buttonup.tag = plugin_name
    
    
    o_label = New Label(hSettings.frame1)
    o_label.Font.size -= 1
    o_label.text = description
    o_label.AutoResize = True
    
    o_separator = New Separator(hsettings.Frame1)
    o_separator.h = Desktop.Scale

End

Public Sub o_buttondown_Click()
  Dim i As Integer
  Dim t As String
  Dim current_plugin As String = Last.tag
  Dim scroll_y As Integer 

  scroll_y = Hsettings.Frame1.scrolly
  
  plugins_all = New String[]
  save_plugin_list() 'ensure we will find hsettings/plist_all:
  Try plugins_all = Split(Settings["hsettings/plist_all"])
  If Error Then 
    Stop
    Return
  Endif
  i = plugins_all.Find(current_plugin)
  If i < 0 Then Return 'not found
  If i >= plugins_all.max Then Return 'already at the bottom.
  
  'swap plugin items representation in the array
  t = plugins_all[i + 1]
  plugins_all[i + 1] = current_plugin
  plugins_all[i] = t

  'save the new ordered array
  Settings["hsettings/plist_all"] = plugins_all.Join()
  Settings.Save()

  'redraw the plugins
  init_hSettings(True)
  
  Wait
  'adjust scroll:
    Hsettings.Frame1.scrolly = scroll_y
  
End


Public Sub o_buttonup_Click()
  Dim i As Integer
  Dim t As String
  Dim current_plugin As String = Last.tag
  Dim sy As Integer = Hsettings.Frame1.scrolly
 
  plugins_all = New String[]
  save_plugin_list() 'ensure we will find hsettings/plist_all:

  Try plugins_all = Split(Settings["hsettings/plist_all"])

  If Error Then 
    Stop
    Return
  Endif

  i = plugins_all.Find(current_plugin)
  If i <= 0 Then Return 'not found or already at the bottom.

  'swap plugin items representation in the array
  t = plugins_all[i - 1]
  plugins_all[i - 1] = current_plugin
  plugins_all[i] = t

  'save the new ordered array
  Settings["hsettings/plist_all"] = plugins_all.Join()
  Settings.Save()

  'redraw the plugins
  init_hSettings(True)
  
  Wait
  Hsettings.Frame1.scrolly = sy
  
End


Public Sub plugin_checkbox_Click()
  
  If Last.value = CheckBox.True Then
    If Not (plugins.Exist(Last.tag)) Then
      load_plugin(Last.tag, rsize)
    Endif
  Else
    unload_plugin(Last.tag)
  Endif
  
  save_plugin_list()
  
End

Public Sub plugin_configure_Click()

  Dim myplugin As Object
  Try myplugin = plugins[Last.tag]
  If Error Then Return
  Try Object.Call(myplugin, "configure")
  
End

Public Sub save_plugin_list()
  
  Dim o As Object  

  Dim savename As String
  
  plugins_all = New String[]
  plugins_enabled.clear
  plugins_enabled = New String[]
  
  Dim o_hbox As Object

   For Each o_hbox In hsettings.Frame1.children
    If o_hbox Is Hbox Then
      For Each o In o_hbox.children
        If o Is CheckBox Then
          If (o.tag Begins "PLUGIN_") Or (o.tag Begins "EXT:") Then
            Debug "saving " & o.handle, o.tag
            Try savename = o.tag
            If o.value = CheckBox.True Then plugins_enabled.Add(savename)
            plugins_all.Add(savename)
          Endif
        Endif
      Next
    Endif
  Next

  Settings["hsettings/plist"] = plugins_enabled.Join()
  Settings["hsettings/plist_all"] = plugins_all.Join()

End

Public Sub TimerClose_Timer()

  MySettings.save_geometry()
  fmain.close
  
End

Public Sub myQuit()
  Try save_plugin_list()
  Try MySettings.save()
  Try xb.close
  Try My_listening_socket.Close
  Try MyCSock.Close
  Try hLock.close
  Try hSettings.close
  plugins.clear
  fmain.persistent = False
  'Try TrayIcon2.Delete()
  fmain.Close()
  fmain.Delete()
  Quit 
End

Private Sub cmdline_args()
  
  Args.begin("Higgins:")
    Try global.unfocused_hide = Not (Args.Has("p", "persistent", ("Do not auto-hide main window")))
    Try global.UseTray = Not (Args.Has("n", "notray", ("Do not use a tray icon")))
    Try global.cleartext = Args.Has("c", "cleartext", ("Clear the previous search on hide"))
  Args.End()
  
End


Public Sub first_init()
 Dim padding As Integer = (Desktop.scale * 2)
  Dim newuser As Boolean = False
  Dim msg As String
  Me.visible = False
  cmdline_args()

  
  resultgrid.Font.size = fmain.Font.size * 1.112
  If Not Exist(Confpath, True) Then
    newuser = True
    Shell.MkDir(confpath)
  Endif
  If Not Exist(extbinpath, True) Then
    Shell.Mkdir(extbinpath)
  Endif


  If Newuser Then
    msg = ("Higgins is not configured") & "\n"
    msg &= ("Please configure at least the hotkey") & "\n"
    msg &= ("to show the higgins window.") & "\n\n"
    Message.Info(msg)
  Endif

  resultgrid.Rows.h = resultgrid.Font.RichTextHeight("|j<br>|j") + padding
  rSize = ResultGrid.Rows.H - padding
  MySettings.load()

  
  If Not Exist(xb_rcpath, True) Then
    msg = "No shortcut defined to hide/show the main window,"
    msg &= "it is advised to define one in the options window."
    Message.Optional(msg, "Ok", "dontshow_message_xbindKeys", "warning")
    Settings.Save()
  Endif

  socket_init()
  If global.UseTray Then InitTrayIcon()
  
  resize_form()
  
  init_hSettings()
  textbox1_change_delay = New Timer As "textbox1_change_delay"
  textbox1_change_delay.enabled = False
  
  If Newuser Then hSettings.Show()
  
  setup_xbindkeys()
  global.fullyloaded = True
  gstyle.applystyle()
  initgrid()
End



'-- FMAIN FUNCTIONS  ---------------------------------------------------------------------



Public Sub Form_KeyRelease()
  If Key.code = Key.esc Then 
    MySettings.save()
    Form_Hide()
  Endif
End

Public Sub Form_Hide()
  Dim timer_hidden As New Timer As "timer_hidden"
  resultgrid.visible = False 'act a s a control on show time to force minimum height
  Wait
  ResultGrid.UnSelectAll()
  resultgrid.row = -1
  Try timer_expand_check.stop
  If fmain.tag = "minimized" Then Return
  fmain.visible = False
  fmain.tag = "minimized"
  previous_search = ""

  If global.cleartext Then 
    textbox1.Clear
    textbox1.text = ""
  Endif
  timer_hidden.delay = 10
  timer_hidden.start
End

Public Sub timer_hidden_timer()
  timer_hidden.stop
  fmain.border = True
End


Public OLD_timer_shown As Timer
Public timer_hidden As Timer
Public timer_shown As Timer
Public iterations As Integer



Private show_time As Float
Public Sub Form_Show()
  Dim iMask As New Image
  Dim decorated As Boolean = hsettings.CheckBox1.value <> CheckBox.true  

  show_time = Timer()
  If Not decorated Then
    'invisible 'use a blank mask to hide the form until we are sure it is displayed in the right position.
    iMask.Resize(fmain.w + 10, fmain.H + 10)
    iMask.Fill(Color.Transparent)
    Paint.Begin(iMask)
      Paint.FillRect(iMask.w - 1, iMask.h - 1, 1, 1, Color.white)
    Paint.end
    fmain.mask = True
    fmain.picture = iMask.Picture
    global.object_unlock(TextBox1) '<--?? needed?
  Endif
  form_resize()
  
  timer_shown = New Timer As "timer_shown"
  timer_shown.trigger
  
End


Public Sub timer_shown_timer()
 'Needed for  kwin + qt5
  '...the window sometimes appears at wrong position
  '..so hammer it with a timer to restore the right one.

  Dim decorated As Boolean = hsettings.CheckBox1.value <> CheckBox.true  
  Dim i As Integer
  Dim right_geom As Collection
  fmain.tag = ""
  resize_form()
  gstyle.make_background()
  TextBox1.SetFocus()
  fmain.Border = decorated

  right_geom = MySettings.load_geometry()

  If Not decorated Then
    Wait 
    If (fmain.screeny <> right_geom["y"]) Or (fmain.screeny <> fmain.y) Or (fmain.screenx <> right_geom["x"]) Then
      For i = 0 To 30
        If fmain.screeny <> right_geom["y"] Then
          Debug fmain.screeny, right_geom["y"] 
        Endif
        If fmain.screeny <> right_geom["y"] Then
          Debug fmain.screenx, right_geom["x"] 
        Endif
        MySettings.load_geometry()  
        Wait 0.01
        If (fmain.screeny = right_geom["y"]) And (fmain.screeny = fmain.y) And (fmain.x = right_geom["x"]) Then Break
      Next
    Endif
  Endif  
  fmain.mask = False
  fmain.picture = Null
End




'-- END FMAIN FUNCTIONS  ---------------------------------------------------------------------

Public Sub QuitMenu_Click()
  myQuit()
End

Public Sub TextBox1_GotFocus()
  If Not global.cleartext Then select_all_override(textbox1)
End


Private Sub select_all_override(t As Textbox)
  While t.Selection.text <> t.Text 
    textbox1.SelectAll
    Wait 0.01
  Wend
End



Private Function findSelectable(o As Object) As Object

  Dim c As Integer = 0
  Dim child, selectable As Object

  Try o.selectall
  If Error Then
    Try c = O.children.count
    If c > 0 Then
      For Each child In O.children
        selectable = findSelectable(CHILD)
        If selectable <> Null Then 
          Return selectable
        Endif
      Next
    Endif
  Else
    Return o
  Endif

End

Public Sub ButtonConfigure_Click()
  hSettings.show
End

Public Sub indexer_indexing_done(finish_time As Date)
  
  MySettings.plugin_indexer_last_index_time = finish_time
  
End

Public Sub Panel1_Arrange()
  With TextBox1
    TextBox2.Move(.x, .y, .w, .h)
    TextBox2.Lower
  End With
End

Private complete_previous As String
Private complete_index As Integer

Public Function Complete(s As String, Optional bNext As Boolean = False) As String

  Dim r As New String[]
  Dim d, f, out As String
  d = File.Dir(s)
  
  If Trim(s) = "" Then Return ""  'dont complete nulls
  If InStr(s, " ") Then Return    'dont complete if spaces in search
  
  If Left(s) = "/" Then 'search in full path
    
    If Right(d) <> "/" Then d &= "/"
    
    f = File.Name(s)
    Try r = Dir(d, f & "*")
    
    If Not Error Then
      If r.count > 0 Then
        If IsDir(d & r[0]) Then r[0] &= "/"
        out = d & r[0]
        Goto returnlabel
      Endif
    Endif
    
  Else 'search in $PATH
    
    For Each d In Split(Application.Env["PATH"], ":")
      Try r = r.Insert(Dir(d, s & "*"))
    Next
    
    If s = previous_search Then 
      Inc complete_index 
      If r.Count <= complete_index Then complete_index = 0
        Else
      complete_index = 0
      s = previous_search 
    Endif
    
    If r.Count > complete_index Then 
      out = r[complete_index]
      Goto returnlabel
    Endif
    
  Endif
  
  returnlabel:
  If out Begins s Then Return out
  Return ""
  
End


Public Sub Form_Leave()
  MySettings.save_geometry()
  MySettings.save()

End

Public Sub Form_Menu()
  Show_main_menu(False)
End

Private Sub Show_main_menu(bResult_actions As Boolean)
  Dim bActions_enabled As Boolean 
  bActions_enabled = bResult_actions And (ResultGrid.current <> Null)
  
  MenuOpenFolder.Enabled = bActions_enabled
  MenuOpenFile.Enabled = bActions_enabled
  MenuCopy.enabled = bActions_enabled
  menupopup.Popup()
End

Public Sub ResultGrid_Menu()
  Show_main_menu(True)
End



Public Sub Form_LostFocus()
  Form_LostFocus_workaround()
End


Public Sub TextBox1_LostFocus()
  Form_LostFocus_workaround()
End

Public Sub ResultGrid_LostFocus()
  Form_LostFocus_workaround()
End

Private Sub Form_LostFocus_workaround()
  'Focus stealing prevention
  If Timer() - show_time < 0.2 Then
    Desktop.ActiveWindow = fmain.handle
    Return
  Endif
  
  If global.unfocused_hide Then
    Repeat
      Try Wait 0.1
    Until Not Error
    If Not (Desktop.ActiveWindow = fmain.Handle) Then 
      If Not (Desktop.activewindow = hsettings.handle) Then
        form_hide()
      Endif
    Endif
  Endif
End

Private mouse_startx As Integer
Private mouse_starty As Integer

Public Sub panel2_MouseDown()
  mouse_startx = Mouse.x
  mouse_starty = Mouse.y
End

Public bRresize As Boolean = False
Public bRMove As Boolean = False

Public Sub panel2_mousemove()
  Dim bResize As Boolean
  Dim ppad As Integer = Max(panel2.padding, Desktop.scale)

  'If fmain.border = True Then Return 
  
  If Not Mouse.left Then
    bRresize = Mouse.y > (panel2.h - (ppad * 4))  
    bRresize = bRresize And Mouse.x > (panel2.w - (ppad * 4)) 

    If bRresize Then 
      panel2.mouse = Mouse.SizeNW
        Else 
      panel2.mouse = Mouse.SizeAll
    Endif
    Return
  Endif

  If bRresize Then
    Me.Move(fmain.x, fmain.y, fmain.w + (mouse.x - mouse_StartX), fmain.h + (mouse.y - mouse_Starty))
    mouse_startx = Mouse.x
    mouse_starty = Mouse.y
      Else
    bRMove = True
    Me.Move(fmain.x + (mouse.x - mouse_StartX), fmain.y + (mouse.y - mouse_Starty))
  Endif
End


Public Sub panel2_Mouseup()
  If bRresize = True Or (bRMove = True) Then
    MySettings.save_geometry()
    bRresize = False
    bRMove = False
  Endif
End


Public Sub check_min_size(Optional force As Boolean = False)
  Dim minh, minw As Integer
  minw = fmain_minw()
  minh = fmain_minh() 
  If force Then 
    not_save_hsize = True
    fmain.h = minh
      Else
    If fmain.w < minw Then fmain.w = minw
    If fmain.h < minh Then 
      not_save_hsize = True
      fmain.h = minh
    Endif
  Endif 
  
End

Public Function fmain_minw() As Integer
  Return fmain.textbox1.Font.TextWidth("_") * 40
End

Public Function fmain_minh() As Integer
  Dim pad As Integer
  pad = Max(panel2.padding, Desktop.scale) * 2

   If fmain.margin Then  
      If fmain.padding = 0 Then 
        pad = pad + (Desktop.scale * 2)
          Else
        pad = pad + (fmain.padding * 2)
      Endif
    Endif
  Return fmain.textbox1.h + pad 
End


Public timer_end_resize As Timer 

Private fmain_old_w As Integer
Private fmain_old_h As Integer

Public Sub timer_end_resize_Timer()
  
  timer_end_resize.stop
  If (fmain_old_w = fmain.w) And (fmain_old_h = fmain.h) Then
    gstyle.make_background()
  Endif
  If Not (not_save_hsize) Then  
    If fmain.h > fmain_minh() Then
      Settings["General/form_open_h"] = fmain.h
      global.form_open_h = fmain.h
      Settings.Save()
    Endif
  Endif
  not_save_hsize = False
End


Public Sub ResultGrid_Enter()
  panel2.mouse = Mouse.default
End
Public Sub buttonconfigure_Enter()
  panel2.mouse = Mouse.default
End

Public Sub TextBox1_Enter()
  Last.mouse = Mouse.text
End
Public Sub TextBox2_Enter()
  Last.mouse = Mouse.text
End

Public Sub Form_Arrange()
  PictureBoxBackground.lower
End

Public Sub add_history(item As String)
  'will check if history plugin is enabled and call his method to store local higgins history 
  'it will only store local files.
  Dim sPlugin As String
  For Each sPlugin In plugins_enabled
    If sPlugin Like "PLUGIN_*_HISTORY" Then
      Object.Call(plugins[sPlugin], "store", [item])
      Return
    Endif
  Next
End

Public Sub textBox_change_noglitch(obj As Object, newvalue As String)
    textbox2.hide
    textbox1.hide
    obj.text = newvalue
    textbox2.show
    textbox1.show
    textbox1.SetFocus()
End

Public Sub ResultGrid_MouseMove()
  Dim scrollbar_state As Integer = Scroll.none

  If Mouse.x > (ResultGrid.w - (Style.ScrollbarSize * 3)) And (Mouse.x < resultgrid.w) Then
      scrollbar_state = Scroll.Vertical
        Else
      scrollbar_state = Scroll.none
  Endif

  resultgrid.ScrollBar = scrollbar_state
  
End

Public Sub Panel2_MouseDrag()
  form_Resize()
End

Public Sub Form_Resize()
  If Not global.fullyloaded Then Return
  If fmain.w < 200 Then fmain.w = 200
  object.lock(fmain)
  check_min_size(Not resultgrid.visible)  
  Object.unLock(fmain)
  fmain_old_w = fmain.W
  fmain_old_h = fmain.H
  PictureBoxBackground.Move(0, 0, fmain.w, fmain.h)
  gstyle.make_background(True)
  timer_end_resize = New Timer As "timer_end_resize"
  timer_end_resize.delay = 100
  timer_end_resize.start
End

